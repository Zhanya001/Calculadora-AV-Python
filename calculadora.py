import numpy as np
import sympy as sp
import unittest

# Funci√≥n para validar entradas num√©ricas positivas
def validar_entrada_positiva(valor):
    """
    Verifica si el valor proporcionado es un n√∫mero positivo mayor que cero.
    
    Par√°metros:
    valor (int, float): El valor que se debe validar.

    Excepciones:
    TypeError: Se lanza si el valor no es un n√∫mero.
    ValueError: Se lanza si el valor es menor o igual a cero.
    """
    if not isinstance(valor, (int, float)):
        raise TypeError("El valor debe ser un n√∫mero.")
    if valor <= 0:
        raise ValueError("El valor debe ser mayor que cero.")

# √Årea c√≠rculo (numpy)
def area_circulo(radio):
    """
    Calcula el √°rea de un c√≠rculo dado su radio.

    Par√°metros:
    radio (float): El radio del c√≠rculo. Debe ser un n√∫mero positivo.

    Retorna:
    float: El √°rea del c√≠rculo calculada como pi * radio^2.

    Excepciones:
    TypeError: Se lanza si el radio no es un n√∫mero.
    ValueError: Se lanza si el radio es menor o igual a 0.
    """
    validar_entrada_positiva(radio)
    return np.pi * radio ** 2

# √Årea tri√°ngulo (sympy)
def area_triangulo(base, altura):
    """
    Calcula el √°rea de un tri√°ngulo dada su base y altura.

    Par√°metros:
    base (float): La base del tri√°ngulo. Debe ser un n√∫mero positivo.
    altura (float): La altura del tri√°ngulo. Debe ser un n√∫mero positivo.

    Retorna:
    float: El √°rea del tri√°ngulo calculada como (base * altura) / 2.

    Excepciones:
    TypeError: Se lanza si base o altura no son n√∫meros.
    ValueError: Se lanza si base o altura son menores o iguales a 0.
    """
    validar_entrada_positiva(base)
    validar_entrada_positiva(altura)
    
    base_sym, altura_sym = sp.symbols('base altura')
    area = (base_sym * altura_sym) / 2
    return area.subs({base_sym: base, altura_sym: altura})

# √Årea cuadrado (numpy)
def area_cuadrado(lado):
    """
    Calcula el √°rea de un cuadrado dado el lado.

    Par√°metros:
    lado (float): El lado del cuadrado. Debe ser un n√∫mero positivo.

    Retorna:
    float: El √°rea del cuadrado calculada como lado^2.

    Excepciones:
    TypeError: Se lanza si el lado no es un n√∫mero.
    ValueError: Se lanza si el lado es menor o igual a 0.
    """
    validar_entrada_positiva(lado)
    return lado ** 2

# Volumen cubo (numpy)
def volumen_cubo(lado):
    """
    Calcula el volumen de un cubo dado su lado.

    Par√°metros:
    lado (float): El lado del cubo. Debe ser un n√∫mero positivo.

    Retorna:
    float: El volumen del cubo calculado como lado^3.

    Excepciones:
    TypeError: Se lanza si el lado no es un n√∫mero.
    ValueError: Se lanza si el lado es menor o igual a 0.
    """
    validar_entrada_positiva(lado)
    return lado ** 3

# √Årea de un rect√°ngulo
def area_rectangulo(base, altura):
    """
    Calcula el √°rea de un rect√°ngulo dada su base y altura.

    Par√°metros:
    base (float): La base del rect√°ngulo. Debe ser un n√∫mero positivo.
    altura (float): La altura del rect√°ngulo. Debe ser un n√∫mero positivo.

    Retorna:
    float: El √°rea del rect√°ngulo calculada como base * altura.

    Excepciones:
    TypeError: Se lanza si la base o la altura no son n√∫meros.
    ValueError: Se lanza si la base o la altura son menores o iguales a 0.
    """
    validar_entrada_positiva(base)
    validar_entrada_positiva(altura)
    return base * altura

# Pruebas unitarias
class TestGeometria(unittest.TestCase):

    def test_area_circulo(self):
        self.assertAlmostEqual(area_circulo(5), np.pi * 25)
        with self.assertRaises(ValueError):
            area_circulo(-1)
        with self.assertRaises(TypeError):
            area_circulo("5")

    def test_area_triangulo(self):
        self.assertEqual(area_triangulo(3, 4), 6)
        with self.assertRaises(ValueError):
            area_triangulo(0, 4)
        with self.assertRaises(TypeError):
            area_triangulo(3, "altura")

    def test_area_cuadrado(self):
        self.assertEqual(area_cuadrado(2), 4)
        with self.assertRaises(ValueError):
            area_cuadrado(-2)
        with self.assertRaises(TypeError):
            area_cuadrado("lado")

    def test_volumen_cubo(self):
        self.assertEqual(volumen_cubo(2), 8)
        with self.assertRaises(ValueError):
            volumen_cubo(-2)
        with self.assertRaises(TypeError):
            volumen_cubo("lado")

    def test_area_rectangulo(self):
        self.assertEqual(area_rectangulo(5, 3), 15)
        with self.assertRaises(ValueError):
            area_rectangulo(0, 3)
        with self.assertRaises(TypeError):
            area_rectangulo("5", 3)

# Mostrar instrucciones
def mostrar_instrucciones():
    
    print("\n" + "="*60)
    print(" " * 15 + "üî¢ Instrucciones de Uso üî¢")
    print("="*60)
    print("üîµ √Årea de un c√≠rculo:")
    print("   ‚û°  El radio debe ser un n√∫mero positivo mayor que 0.")
    print("   üö´ No se permiten valores negativos ni cero.")
    print("-" * 60)
    
    print("üî∫ √Årea de un tri√°ngulo:")
    print("   ‚û°  La base y la altura deben ser n√∫meros positivos mayores que 0.")
    print("   üö´ No se permiten valores negativos ni cero.")
    print("-" * 60)
    
    print("üü© √Årea de un cuadrado:")
    print("   ‚û°  El lado debe ser un n√∫mero positivo mayor que 0.")
    print("   üö´ No se permiten valores negativos ni cero.")
    print("-" * 60)
    
    print("üü¶ Volumen de un cubo:")
    print("   ‚û°  El lado debe ser un n√∫mero positivo mayor que 0.")
    print("   üö´ No se permiten valores negativos ni cero.")
    print("-" * 60)
    
    print("üüß √Årea de un rect√°ngulo:")
    print("   ‚û°  La base y la altura deben ser n√∫meros positivos mayores que 0.")
    print("   üö´ No se permiten valores negativos ni cero.")
    print("="*60 + "\n")
    
# Funci√≥n principal para solicitar valores del usuario
def solicitar_valores():
    while(True):
        try:
        
            print("\n--- Calculadora Geom√©trica ---\n")
            # Preguntar al usuario qu√© c√°lculo desea hacer
            print("1. √Årea de un c√≠rculo")
            print("2. √Årea de un tri√°ngulo")
            print("3. √Årea de un cuadrado")
            print("4. Volumen de un cubo")
            print("5. √Årea de un rect√°ngulo")
            print("6. Correr Unit Tests con unittest")
            print("7. Salir del programa")
            opcion = int(input("\nElige una opci√≥n (1-7): "))
            
            if opcion == 1:
                radio = input("Ingresa el radio del c√≠rculo: ")
                if not radio.isnumeric():
                    raise ValueError("El valor introducido no es un n√∫mero")
                radio = float(radio)
                print(f"√Årea del c√≠rculo: {area_circulo(radio)}")
            elif opcion == 2:
                base = float(input("Ingresa la base del tri√°ngulo: "))
                altura = float(input("Ingresa la altura del tri√°ngulo: "))
                print(f"√Årea del tri√°ngulo: {area_triangulo(base, altura)}")
            elif opcion == 3:
                lado = float(input("Ingresa el lado del cuadrado: "))
                print(f"√Årea del cuadrado: {area_cuadrado(lado)}")
            elif opcion == 4:
                lado = float(input("Ingresa el lado del cubo: "))
                print(f"Volumen del cubo: {volumen_cubo(lado)}")
            elif opcion == 5:
                base = float(input("Ingresa la base del rect√°ngulo: "))
                altura = float(input("Ingresa la altura del rect√°ngulo: "))
                print(f"√Årea del rect√°ngulo: {area_rectangulo(base, altura)}")
            elif opcion == 6:
                unittest.main(argv=[''], exit=False)
            elif opcion == 7:
                break
            else:
                print("Opci√≥n no v√°lida. Elige un n√∫mero entre 1 y 7.")

        except ValueError as e:
            print(f"Error: {e}. Aseg√∫rate de ingresar un n√∫mero v√°lido.")
        except (TypeError, ValueError) as e:
            print(f"Error: {e}")

# Ejemplos y ejecuci√≥n de la calculadora
if __name__ == "__main__":
    mostrar_instrucciones()
    solicitar_valores()